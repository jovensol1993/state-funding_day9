# day09

2차 배열
==> 1차 배열을 다시 배열로 관리하는 것.

2차 배열을 만드는 방법

	1. 배열의 주소를 기억할 변수를 만든다.
		==> Heap 영역에 있는 데이터는 주소를 알아야 사용할 수 있기 때문이다.
		
		방법 ]
		
			데이터 타입[][] 변수이름; // 변수 선언
			==> 즉, []을 하나만 쓰면 1차 배열을 관리하는 것이되고
				[][]두개를 사용하면 2차 배열을 관리하는 것이 된다.
				
			
		예 	 ]
			
			int[][] num;
			
	2. 1차배열을 몇개를 관리할지 결정하고
	   1차 배열의 주소를 기억할 메모리를 만든다.
	   
	   방법 ] 
	   
	   		new 데이터타입[갯수][];
	   		개수는 1차 배열의 갯수를 지정한다.
	   	
	   	예  ]
	   		
	   		num = new int[3][];
	   		==> 이것은 주소를 기억해야만 사용할 수 있으므로...
	   		
	   3. 실제 1차 배열을 만들어 준다.
	   
	   	  방법 ]
	   	  
	   	  	new 데이터타입[갯수];
	   	  	
	   	  예   ]
	   	  
	   	  	num[0] = new int[5]; //num의 첫번째 방에는 int[5]라는 배열이 있음
	   	  	<== 이것 역시 주소를 기억해야만 사용할 수 있으므로...
	   	  	
	   	  참고 ]
	   	  
	   	  	Heap Type
	   	  	==> 그 주소가 가리키는 곳에 있는 데이터의 형태를 가리키는 말...
	   	  	==> 같은 Heap Type 끼리만 사용가능하다.
	   	  	==> 차원 역시 같아야 한다.
	   	  	
	   	  		int[][] no = new int[3]; (x)
	   	  		
	   	  		int[] num = new int[5]; 
	   	  		==> Heap Type은 num이라는 변수의 주소가 가리키는 곳의 데이터 형태는 int 
	   	  			1차 배열이다.
	   	  
	   	  참고 ]
	   	  
	   	  	
	   	  	2차배열에 길이가 다른 1차배열을 넣을 수도 있다.
	   	  	
	   	  	INT[][] no1 = new int[2][];
	   	  	
	   	  	int[] no2 = new int[3];
	   	  	int[] no3 = new int[0];
	   	  	no1[0] = no2;
	   	  	no1[1] = no3;
	 -------------------------------------------------------------------------------------
	 
자바 역시 C언어와 마찬가지로 사각형 형태의 배열도 만들 수 있다.

	형식 ]
	
		데이터타입[][] 변수이름 = new 데이터타입[행수][열수];
		
	예	]
		
		int[][]num = new int[3][5];
		==> 3줄짜리 각 줄은 5칸짜리 사각형 모양의 배열
		
	참고 ]
	
		사각형 모양이라 하더라도
		내부적으로는 앞에서 설명한 방식으로 메모리가 생선된다.
		
	참고 ]
	
		2차 배열도 초기화가 가능하다.
		
			방법 ]
				1차 배열의 경우
				int[] num = {}; //1차배열 초기화
				int[] num = new int[]{};
				
				2차 배열의 경우
				int[][] num = {{},{}};
				int[][] num = new int[][]{{},{}};
				
				==> 여기서도 배열의 갯수를 지정할 수 없다.
					데이터의 갯수에 따라서 배열의 길이가 정해지기 때문에....
					